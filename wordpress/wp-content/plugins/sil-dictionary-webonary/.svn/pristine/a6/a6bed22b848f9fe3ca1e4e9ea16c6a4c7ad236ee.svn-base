<?php
if(exec('echo EXEC') == 'EXEC' && file_exists($argv[1] . "exec-configured.txt"))
{
	define('WP_INSTALLING', true);
	require($argv[1] . "wp-load.php");
	switch_to_blog($argv[2]);
	
	require($argv[1] . "wp-content/plugins/sil-dictionary-webonary/include/infrastructure.php");
	install_sil_dictionary_infrastructure();
	
	require($argv[1] . "wp-content/plugins/sil-dictionary-webonary/include/xhtml-importer.php");
	
	//it isn't actually from the api, but saves us renaming the variable to "background" or something like that...
	$api = true;
	$verbose = true;
	$filetype = $argv[3];
	$xhtmlFileURL = $argv[4];
}
else
{
	$api = false;
	$verbose = false;
}
global $wpdb;

$import = new sil_pathway_xhtml_Import();

$import->api = $api;
$import->verbose = $verbose;

$reader = new XMLReader;
$reader->open($xhtmlFileURL);


update_option("importStatus", $filetype);

/*
 * Import
 */

$import->search_table_name = $wpdb->prefix . 'sil_search';
	
$current_user = wp_get_current_user();

if ( $filetype== 'configured' || $filetype == 'stem' || $filetype == 'reversal')
{
	echo "Starting Import\n";
	echo "<br>";
	
	$sql = "SELECT menu_order
	FROM $wpdb->posts
	INNER JOIN " . $wpdb->prefix . "term_relationships ON object_id = ID
		ORDER BY menu_order DESC
		LIMIT 0,1";
	
	$menu_order = $wpdb->get_var($sql);
	
	if($menu_order == NULL)
	{
		$menu_order = 0;
	}
	
	$header = "";
	$isHead = false;

	$postentry = "";
	$isEntry = false;
	$entry_counter = 1;
	
	/*
	 *
	 * Load the configured post entries
	 */
	while ($reader->read() && $reader->name !== 'head');

	if ($reader->name === 'head')
	{
		//$reader->read();
		$header = $reader->readOuterXml();
		$import->import_xhtml_writing_systems($header);
	}
	
	//while ($reader->read() && $reader->getAttribute("class") !== 'letData');

	//while ($reader->getAttribute("class") === 'letData')
	while( $reader->read() )
	{
		//while ($reader->read() && $reader->getAttribute("class") !== 'entry' && $reader->getAttribute("class") !== 'minorentry');
	
		while ($reader->getAttribute("class") === 'entry' || $reader->getAttribute("class") === 'minorentry' || $reader->getAttribute("class") === 'minorentryvariant')
		{
			$postentry =  $reader->readOuterXml();
			
			//$reader->next("div");
		
			if(trim($postentry) != "")
			{
				if($filetype == 'stem')
				{
					$entry_counter = $import->import_xhtml_stem_indexes($postentry, $entry_counter);
				}
				elseif($filetype == 'reversal')
				{
					$import->reversal_table_name = $wpdb->prefix . 'sil_reversals';
					$entry_counter = $import->import_xhtml_reversal_indexes($postentry, $entry_counter);
				}
				else
				{
					//filetype = configured
					$entry_counter = $import->import_xhtml_entries($postentry, $entry_counter, $menu_order);
				}
				
				$menu_order++;
			}

			$reader->next("div");
		}
	}
	
	if($entry_counter == 1)
	{
		echo "<div style=color:red>ERROR: No entries found.</div><br>";
		return;
	}

}

if($filetype == "configured")
{
	update_option("totalConfiguredEntries", ($entry_counter - 1));
		
	////$import->convert_fieldworks_links_to_wordpress();
	update_option("importStatus", "indexing");
	
	$import->index_searchstrings();
	
	$import->convert_fields_to_links();
	
	$message = "The import of the vernacular (configured) xhtml export is completed.\n";
	$message .= "Go here to configure more settings: " . get_site_url() . "/wp-admin/admin.php?page=webonary";
	
	wp_mail( $current_user->user_email, 'Import complete', $message);
	
	echo "Import finished\n";
}
elseif($filetype == "stem")
{
	echo "Import finished\n";
}
elseif ( $filetype == 'reversal')
{
	update_option("importStatus", "importFinished");
	//$import->index_reversals();
		
	$message = "The reversal import is completed.\n";
	$message .= "Go here to configure more settings: " . get_site_url() . "/wp-admin/admin.php?page=webonary";
		
	wp_mail( $current_user->user_email, 'Reversal Import complete', $message);
	
}



$file = $import->get_latest_xhtmlfile();
if(isset($file))
{
	if(substr($file->url, strlen($file->url) - 5, 5) == "xhtml")
	{
		wp_delete_attachment( $file->ID );
		error_log("deleted attachment: " . $file->url);
	}
}
else
{
	//file is inside extracted zip directory
	unlink($xhtmlFileURL);
	error_log("unlinked: " . $xhtmlFileURL);
}

?>